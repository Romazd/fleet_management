# Fleet Management API - Extended Seeds
# Genera 50 veh√≠culos con 200+ servicios de mantenimiento para pruebas completas

require 'faker'

puts "üßπ Limpiando base de datos..."
MaintenanceService.destroy_all
Vehicle.destroy_all
User.destroy_all

puts "\nüë§ Creando usuario admin..."
admin = User.create!(
  email: 'admin@fleet.com',
  password: 'password123',
  name: 'Admin User'
)
puts "   ‚úì Usuario creado: #{admin.email}"

# Configuraci√≥n
VEHICLE_COUNT = 50
MIN_SERVICES_PER_VEHICLE = 0  # Algunos veh√≠culos sin servicios
MAX_SERVICES_PER_VEHICLE = 10 # Algunos con muchos servicios

# Arrays de datos para variedad
BRANDS = ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Nissan', 'Mazda', 'Volkswagen',
          'BMW', 'Mercedes-Benz', 'Audi', 'Hyundai', 'Kia', 'Subaru', 'Mitsubishi',
          'Dodge', 'Ram', 'Jeep', 'GMC', 'Volvo', 'Tesla']

MODELS = {
  'Toyota' => ['Camry', 'Corolla', 'RAV4', 'Highlander', 'Tacoma', 'Prius'],
  'Honda' => ['Civic', 'Accord', 'CR-V', 'Pilot', 'Odyssey', 'Ridgeline'],
  'Ford' => ['F-150', 'Explorer', 'Escape', 'Focus', 'Fusion', 'Mustang'],
  'Chevrolet' => ['Silverado', 'Malibu', 'Equinox', 'Tahoe', 'Suburban', 'Camaro'],
  'Nissan' => ['Altima', 'Sentra', 'Rogue', 'Pathfinder', 'Frontier', 'Maxima'],
  'Default' => ['Sport', 'Sedan', 'SUV', 'Truck', 'Van', 'Coupe']
}

SERVICE_DESCRIPTIONS = [
  'Cambio de aceite y filtro',
  'Rotaci√≥n de llantas',
  'Revisi√≥n de frenos',
  'Cambio de bater√≠a',
  'Alineaci√≥n y balanceo',
  'Cambio de filtro de aire',
  'Cambio de buj√≠as',
  'Revisi√≥n de transmisi√≥n',
  'Cambio de l√≠quido de frenos',
  'Servicio mayor 30,000 km',
  'Servicio mayor 60,000 km',
  'Servicio mayor 90,000 km',
  'Reparaci√≥n de motor',
  'Reparaci√≥n de transmisi√≥n',
  'Cambio de amortiguadores',
  'Cambio de correa de distribuci√≥n',
  'Diagn√≥stico el√©ctrico',
  'Reparaci√≥n de aire acondicionado',
  'Cambio de limpiaparabrisas',
  'Pulido de faros',
  'Cambio de escape',
  'Reparaci√≥n de radiador',
  'Cambio de termostato',
  'Revisi√≥n de suspensi√≥n',
  'Cambio de embrague'
]

puts "\nüöó Creando #{VEHICLE_COUNT} veh√≠culos..."

vehicles = []
vehicle_stats = { active: 0, inactive: 0, in_maintenance: 0 }

VEHICLE_COUNT.times do |i|
  # Generar VIN √∫nico
  vin = Faker::Vehicle.vin.upcase

  # Generar placa √∫nica mexicana
  plate = "MEX-#{rand(1000..9999)}"

  # Seleccionar marca y modelo
  brand = BRANDS.sample
  model = (MODELS[brand] || MODELS['Default']).sample

  # A√±o entre 2015 y 2024
  year = rand(2015..2024)

  # Determinar estado inicial (ser√° actualizado por callbacks si tiene servicios pendientes)
  # 70% active, 20% inactive, 10% ser√° in_maintenance despu√©s de agregar servicios
  status_random = rand(100)
  status = if status_random < 70
    'active'
  elsif status_random < 90
    'inactive'
  else
    'active' # Ser√° cambiado por callbacks si tiene servicios pendientes
  end

  vehicle = Vehicle.create!(
    vin: vin,
    plate: plate,
    brand: brand,
    model: model,
    year: year,
    status: status
  )

  vehicles << vehicle

  # Mostrar progreso cada 10 veh√≠culos
  if (i + 1) % 10 == 0
    print "   ‚úì #{i + 1} veh√≠culos creados...\n"
  end
end

puts "   ‚úì Total: #{vehicles.count} veh√≠culos creados"

puts "\nüîß Creando servicios de mantenimiento..."

total_services = 0
services_by_status = { pending: 0, in_progress: 0, completed: 0 }

vehicles.each_with_index do |vehicle, index|
  # Determinar n√∫mero de servicios para este veh√≠culo
  # 10% sin servicios, 20% con muchos servicios (7-10), resto normal (1-6)
  services_random = rand(100)
  num_services = if services_random < 10
    0 # Sin servicios
  elsif services_random < 30
    rand(7..MAX_SERVICES_PER_VEHICLE) # Muchos servicios
  else
    rand(1..6) # Normal
  end

  num_services.times do |service_index|
    # Fechas escalonadas hacia atr√°s
    base_date = Date.current - (service_index * rand(30..90)).days

    # Determinar estado del servicio
    # Para servicios m√°s antiguos, mayor probabilidad de estar completados
    status_random = rand(100)
    if service_index > 3 # Servicios m√°s antiguos
      status = status_random < 80 ? 'completed' : 'pending'
    else # Servicios recientes
      status = if status_random < 40
        'completed'
      elsif status_random < 75
        'pending'
      else
        'in_progress'
      end
    end

    # Determinar prioridad
    priority_random = rand(100)
    priority = if priority_random < 50
      'low'
    elsif priority_random < 85
      'medium'
    else
      'high'
    end

    # Costo en centavos (entre $200 y $15,000 pesos)
    cost_cents = rand(20000..1500000)

    # Crear el servicio
    service = MaintenanceService.create!(
      vehicle: vehicle,
      description: SERVICE_DESCRIPTIONS.sample + (rand(100) < 20 ? " - #{Faker::Lorem.sentence(word_count: 3)}" : ""),
      status: status,
      date: base_date,
      cost_cents: cost_cents,
      priority: priority,
      completed_at: status == 'completed' ? base_date + rand(1..7).days : nil
    )

    total_services += 1
    services_by_status[status.to_sym] += 1
  end

  # Mostrar progreso cada 10 veh√≠culos
  if (index + 1) % 10 == 0
    print "   ‚úì Servicios creados para #{index + 1} veh√≠culos...\n"
  end
end

puts "   ‚úì Total: #{total_services} servicios creados"

# Actualizar estad√≠sticas finales de veh√≠culos
Vehicle.all.each do |v|
  vehicle_stats[v.status.to_sym] += 1
end

puts "\nüìä Resumen de datos creados:"
puts "   ‚Ä¢ Usuarios: #{User.count}"
puts "   ‚Ä¢ Veh√≠culos: #{Vehicle.count}"
puts "   ‚Ä¢ Servicios de mantenimiento: #{MaintenanceService.count}"
puts "     - Pendientes: #{MaintenanceService.pending.count}"
puts "     - En progreso: #{MaintenanceService.in_progress.count}"
puts "     - Completados: #{MaintenanceService.completed.count}"

puts "\nüí∞ Estad√≠sticas de costos:"
if MaintenanceService.any?
  total_cost = MaintenanceService.sum(:cost_cents) / 100.0
  avg_cost = total_cost / MaintenanceService.count
  max_cost = MaintenanceService.maximum(:cost_cents) / 100.0
  min_cost = MaintenanceService.minimum(:cost_cents) / 100.0

  puts "   ‚Ä¢ Costo total: $#{total_cost.round(2).to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse}"
  puts "   ‚Ä¢ Costo promedio: $#{avg_cost.round(2)}"
  puts "   ‚Ä¢ Costo m√°ximo: $#{max_cost.round(2)}"
  puts "   ‚Ä¢ Costo m√≠nimo: $#{min_cost.round(2)}"
end

puts "\nüö¶ Estado de la flota:"
puts "   ‚Ä¢ Veh√≠culos activos: #{vehicle_stats[:active]}"
puts "   ‚Ä¢ Veh√≠culos en mantenimiento: #{vehicle_stats[:in_maintenance]}"
puts "   ‚Ä¢ Veh√≠culos inactivos: #{vehicle_stats[:inactive]}"

puts "\nüìà Distribuci√≥n de servicios por veh√≠culo:"
vehicles_without_services = Vehicle.left_joins(:maintenance_services)
                                  .where(maintenance_services: { id: nil })
                                  .count
vehicles_with_many_services = Vehicle.joins(:maintenance_services)
                                    .group('vehicles.id')
                                    .having('COUNT(maintenance_services.id) >= 7')
                                    .count.size

puts "   ‚Ä¢ Veh√≠culos sin servicios: #{vehicles_without_services}"
puts "   ‚Ä¢ Veh√≠culos con 7+ servicios: #{vehicles_with_many_services}"
puts "   ‚Ä¢ Promedio de servicios por veh√≠culo: #{(total_services.to_f / Vehicle.count).round(2)}"

# Informaci√≥n sobre paginaci√≥n
puts "\nüìÑ Informaci√≥n para pruebas de paginaci√≥n:"
puts "   ‚Ä¢ Total de veh√≠culos: #{Vehicle.count}"
puts "   ‚Ä¢ P√°ginas con 20 items: #{(Vehicle.count / 20.0).ceil}"
puts "   ‚Ä¢ P√°ginas con 10 items: #{(Vehicle.count / 10.0).ceil}"

# Top marcas
top_brands = Vehicle.group(:brand).count.sort_by { |_, count| -count }.first(5)
puts "\nüèÜ Top 5 marcas:"
top_brands.each_with_index do |(brand, count), index|
  puts "   #{index + 1}. #{brand}: #{count} veh√≠culos"
end

puts "\n‚úÖ Seeds extendidos ejecutados exitosamente!"
puts "\nüìù Credenciales de acceso:"
puts "   Email: admin@fleet.com"
puts "   Password: password123"
puts "\nüí° Tips para testing:"
puts "   ‚Ä¢ Usa ?per_page=10 para ver m√°s p√°ginas"
puts "   ‚Ä¢ Prueba filtros por marca: #{BRANDS.first(5).join(', ')}"
puts "   ‚Ä¢ A√±os disponibles: 2015-2024"
puts "   ‚Ä¢ Estados: active, inactive, in_maintenance"